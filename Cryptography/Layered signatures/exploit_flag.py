#!/usr/bin/env python3
from Crypto.Util.number import bytes_to_long, long_to_bytes
from hashlib import sha256
import secrets, json, sys

# --- REMPLACEZ uniquement les cinq lignes ci‑dessous ---
p   = 157_177_458_027_947_738_464_608_587_718_505_170_872_557_537_311_336_022_386_936_190_418_737_852_141_444_802_600_222_526_305_430_833_558_655_717_806_361_264_485_789_209_743_716_195_302_937_247_478_034_883_845_835_496_282_499_162_731_072_456_548_430_299_962_306_072_692_670_825_782_721_923_481_661_135_742_935_447_793_446_928_303_177_027_490_662_275_563_294_516_442_565_718_398_572_361_235_897_805_000_082_380_599
q   = 809_343_168_468_551_208_052_383_151_187
gs  = 146_067_888_133_731_084_381_479_671_046_861_694_859_644_193_710_676_143_636_660_188_082_488_736_238_386_512_791_852_349_456_033_955_418_811_066_760_302_604_281_367_604_033_749_754_801_360_598_341_084_580_152_896_847_129_137_035_236_176_943_137_747_472_903_691_859_699_768_448_908_569_010_190_746_026_212_107_416_318_427_254_854_356_679_465_117_970_005_044_566_743_257_299_381_970_272_037_400_064_984_062_974_332
sm  = [546_900_764_377_820_607_646_972_293_527_389_051_485_694_020_988_794_375_158_844_492_537_852_735_621_975_143_360_126_947_616_605_988_868_065_205_557_686_575_470_272_514_315_894_826_166_408_869_957_549_587_952_481_751_453_714_408_443_269_622_900_695_161_298_556_514_743_517_412_312_976_494_951_046_096_659_501_981_559_208_567_519_251_676_746_318_111_549_930_975_609_530_018_393_787_511_469_732_237_846_560_342_80,
       96_496_657_955_762_597_190_949_753_803_768_892_534_939_842_041_733_638_032_481_918_259_641_388_199_486,
       993_016_746_883_593_442_816_848_937_639_056_958_580_230_265_316_394_659_260_201_382_576_265_033_895_148_410_019_517_307_653_282_436_827_622_316_254_346_252_576_082_200_969_334_823_325_670_253_305_492_640_284_872_735_703_759_301_107_309_730_963_683_625_496_598_066_314_289_833_180_385_328_415_197_786_951_389_288_357_324_356_319_455_337_629_047_427_479_832_216_989_662_285_132_488_888_687_372_260_043_008_021_902_333_361_591_457_845_399_594_486_778_475_954_759_498_184_783_358_292_348_836_330_099_312_845_216_301_188_411_239_395_434_854_983_034_777_735_179_891_108_300_212_010_059_897_933_186_165_873_222_567_983_489_088_913_473_692_311_458_102_185_182_985_704_434_261_752_295_842_898_044_581_094_279_351_214_362_041_908_212_883_877_536_881_671_130_019_550_561_599_353_488_714_124_678_374_440_382_887_453_982_643_151_966_9,
       1_160_851_070_807_901_358_399_389_035_390,
       1_160_851_070_807_901_358_399_389_035_390,
       1_160_851_070_807_901_358_399_389_035_390,
       1_160_851_070_807_901_358_399_389_035_390]
leak= 158_547_614_088_044_248_897_970_003_135

# ------------------------------------------------------

g = 25
def nxt(m): return bytes_to_long(sha256(long_to_bytes(m)).digest())

def weird_schnorr_sign(a,x):
    k = secrets.randbits(1024)
    r = pow(g,k,p)
    e = bytes_to_long(sha256(long_to_bytes(r)+long_to_bytes(a)).digest())
    return [(k + x*e) % ((p-1)//2), e]

def sign(m,x):
    ta = [secrets.randbits(100) for _ in range(4)]
    cc = [nxt(m % q)]
    for _ in range(3): cc.append(nxt(cc[-1]))
    sta = (m - sum(pow(g,b,p)*c % p for b,c in zip(ta,cc))) % q
    r   = secrets.randbits(100)
    a   = (p-1-x)*p - (q*r+sta)*(p-1)
    return weird_schnorr_sign(a,x)+[a]+ta

# 1) récupérer la clé secrète : a = sm[2], s = -a mod (p-1)
a = sm[2]
s = (-a) % (p-1)

# 2) forger une signature sur leak (mêmes reste mod q que le flag)
sig = sign(leak, s)
print(",".join(map(str,sig)))
